using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace ConsoleApp4
{
    internal class Program
    {
        public static string ClientTCPDayTime(string server)
        {
            TcpClient tcpClient = new TcpClient();
            tcpClient.Connect(server, 13);
            //tcpClient.Connect("127.0.0.1", 13);

            NetworkStream stream = tcpClient.GetStream();
            string message = "";
            byte[] data = System.Text.Encoding.ASCII.GetBytes(message);
            stream.Write(data, 0, data.Length);

            data = new Byte[256];
            string responseData = string.Empty;
            int bytes = stream.Read(data, 0, data.Length);
            responseData = System.Text.Encoding.ASCII.GetString(data, 0, bytes);

            return responseData;
        }

        public static string ClientUDPDayTime(string ntpServer, int port)
        {
            var ntpData = new byte[48];
            ntpData[0] = 0x1B;
            var ipEndPoint = new IPEndPoint(IPAddress.Parse(ntpServer), port);
            using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))
            {
                socket.Connect(ipEndPoint);
                socket.ReceiveTimeout = 3000;
                socket.Send(ntpData);
                socket.Receive(ntpData);
                socket.Close();
            }
            string result = Encoding.UTF8.GetString(ntpData);
            return result;
        }

        public static DateTime ClientUDPNetworkTimeProtocol(string ntpServer)
        {
            //default Windows time server
            //const string ntpServer = "time.windows.com";

            // NTP message size - 16 bytes of the digest (RFC 2030)
            var ntpData = new byte[48];

            //Setting the Leap Indicator, Version Number and Mode values
            ntpData[0] = 0x1B; //LI = 0 (no warning), VN = 3 (IPv4 only), Mode = 3 (Client Mode)

            var addresses = Dns.GetHostEntry(ntpServer).AddressList;

            //The UDP port number assigned to NTP is 123
            var ipEndPoint = new IPEndPoint(addresses[0], 123);
            //NTP uses UDP

            using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))
            {
                socket.Connect(ipEndPoint);

                //Stops code hang if NTP is blocked
                socket.ReceiveTimeout = 3000;

                socket.Send(ntpData);
                socket.Receive(ntpData);
                socket.Close();
            }

            //Offset to get to the "Transmit Timestamp" field (time at which the reply 
            //departed the server for the client, in 64-bit timestamp format."
            const byte serverReplyTime = 40;

            //Get the seconds part
            ulong intPart = BitConverter.ToUInt32(ntpData, serverReplyTime);

            //Get the seconds fraction
            ulong fractPart = BitConverter.ToUInt32(ntpData, serverReplyTime + 4);

            //Convert From big-endian to little-endian
            intPart = SwapEndianness(intPart);
            fractPart = SwapEndianness(fractPart);

            var milliseconds = (intPart * 1000) + ((fractPart * 1000) / 0x100000000L);

            //**UTC** time
            var networkDateTime = (new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc)).AddMilliseconds((long)milliseconds);

            return networkDateTime.ToLocalTime();
        }

        // stackoverflow.com/a/3294698/162671
        static uint SwapEndianness(ulong x)
        {
            return (uint)(((x & 0x000000ff) << 24) +
                           ((x & 0x0000ff00) << 8) +
                           ((x & 0x00ff0000) >> 8) +
                           ((x & 0xff000000) >> 24));
        }

        public static DateTime ClientUDPNetworkTimeProtocolIP(string ntpServer)
        {
            //default Windows time server
            //const string ntpServer = "time.windows.com";

            // NTP message size - 16 bytes of the digest (RFC 2030)
            var ntpData = new byte[48];

            //Setting the Leap Indicator, Version Number and Mode values
            ntpData[0] = 0x1B; //LI = 0 (no warning), VN = 3 (IPv4 only), Mode = 3 (Client Mode)

            //var addresses = Dns.GetHostEntry(ntpServer).AddressList;


            //The UDP port number assigned to NTP is 123
            var ipEndPoint = new IPEndPoint(IPAddress.Parse(ntpServer), 123);
            //NTP uses UDP

            using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))
            {
                socket.Connect(ipEndPoint);

                //Stops code hang if NTP is blocked
                socket.ReceiveTimeout = 3000;

                socket.Send(ntpData);
                socket.Receive(ntpData);
                socket.Close();
            }

            //Offset to get to the "Transmit Timestamp" field (time at which the reply 
            //departed the server for the client, in 64-bit timestamp format."
            const byte serverReplyTime = 40;

            //Get the seconds part
            ulong intPart = BitConverter.ToUInt32(ntpData, serverReplyTime);

            //Get the seconds fraction
            ulong fractPart = BitConverter.ToUInt32(ntpData, serverReplyTime + 4);

            //Convert From big-endian to little-endian
            intPart = SwapEndianness(intPart);
            fractPart = SwapEndianness(fractPart);

            var milliseconds = (intPart * 1000) + ((fractPart * 1000) / 0x100000000L);

            //**UTC** time
            var networkDateTime = (new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc)).AddMilliseconds((long)milliseconds);

            return networkDateTime.ToLocalTime();
        }

        static void Main(string[] args)
        {
            Console.WriteLine("DayTime TCP 127.0.0.1 => " + ClientTCPDayTime("127.0.0.1"));
            //Console.WriteLine("DayTime TCP 192.168.30.143 => " +  ClientTCPDayTime("192.168.30.143"));
            //Console.WriteLine("DayTime UTP 192.168.30.143 => " +  ClientUDPDayTime("192.168.30.143", 13));

            Console.WriteLine("NetworkTimeProtocol time.windows.com => " +  ClientUDPNetworkTimeProtocol("time.windows.com"));

            //Console.WriteLine("NetworkTimeProtocol 192.168.30.143 => " + ClientUDPNetworkTimeProtocolIP("192.168.30.143"));

            Console.WriteLine("NetworkTimeProtocol 192.168.30.127 => " + ClientUDPNetworkTimeProtocolIP("192.168.30.127"));
            Console.WriteLine("NetworkTimeProtocol 127.0.0.1 => " + ClientUDPNetworkTimeProtocolIP("127.0.0.1"));
        }


        //reg add HKLM\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer /v Enabled /t REG_DWORD /d 1 /f
        //reg add HKLM\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer /v InputProvider /t REG_DWORD /d 1 /f
        //reg add HKLM\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer /v InputProvider /t REG_DWORD /d 1 /f
    }
}
